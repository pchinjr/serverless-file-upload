AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Upload files to S3 via API Gateway
Globals:
  Function:
    Runtime: nodejs20.x
Resources:
  FileUploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-${AWS::Region}-${AWS::AccountId}"
  FileMetadataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: FileMetadata
      AttributeDefinitions:
        - AttributeName: FileId
          AttributeType: S
        - AttributeName: UploadDate
          AttributeType: S
      KeySchema:
        - AttributeName: FileId
          KeyType: HASH
        - AttributeName: UploadDate
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
  FileApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
  WriteMetadataPermission: 
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt WriteMetadataFunction.Arn
      Principal: "s3.amazonaws.com"
      SourceArn: !GetAtt FileUploadBucket.Arn
      SourceAccount: !Sub ${AWS::AccountId}
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: S3ReadAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:ListBucket'
                Resource:
                  - !Sub "arn:aws:s3:::${AWS::StackName}-${AWS::Region}-${AWS::AccountId}*"
        - PolicyName: DynamoDBWriteAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:DeleteItem'
                Resource: 
                  - !GetAtt FileMetadataTable.Arn
        - PolicyName: LambdaCloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
  FileUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/upload
      Handler: upload.lambdaHandler
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref FileUploadBucket
      Environment:
        Variables:
          BUCKET_NAME: !Ref FileUploadBucket
      Events:
        FileUploadApi:
          Type: Api
          Properties:
            RestApiId: !Ref FileApi
            Path: /upload
            Method: POST
  WriteMetadataFunction: 
    Type: AWS::Serverless::Function
    Properties: 
      CodeUri: src/writeMetadata
      Handler: writeMetadata.lambdaHandler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: 
              Ref: FileUploadBucket
            Events: s3:ObjectCreated:*
      Environment:
        Variables:
          TABLE_NAME: !GetAtt FileMetadataTable.Arn
Outputs:
  FileUploadApi:
    Description: API Gateway endpoint URL for file upload
    Value: !Sub https://${FileApi}.execute-api.${AWS::Region}.amazonaws.com/prod/upload
  FileUploadBucketName:
    Description: S3 Bucket for file uploads
    Value: !Ref FileUploadBucket
  FileMetadataTable:
    Description: DynamoDB table for file metadata
    Value: !Ref FileMetadataTable